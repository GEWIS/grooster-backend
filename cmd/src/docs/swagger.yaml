definitions:
  Roster:
    properties:
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      organ:
        $ref: '#/definitions/Organ'
      organId:
        type: integer
      rosterAnswer:
        items:
          $ref: '#/definitions/RosterAnswer'
        type: array
      rosterShift:
        items:
          $ref: '#/definitions/RosterShift'
        type: array
      saved:
        type: boolean
      updatedAt:
        type: string
      values:
        items:
          type: string
        type: array
    type: object
  RosterAnswer:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      rosterId:
        type: integer
      rosterShiftId:
        type: integer
      updatedAt:
        type: string
      userId:
        type: integer
      value:
        type: string
    type: object
  RosterAnswerCreateRequest:
    properties:
      rosterId:
        type: integer
      rosterShiftId:
        type: integer
      userId:
        type: integer
      value:
        type: string
    type: object
  RosterAnswerUpdateRequest:
    properties:
      value:
        type: string
    type: object
  RosterCreateRequest:
    properties:
      date:
        type: string
      name:
        type: string
      organId:
        type: integer
    type: object
  RosterShift:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      rosterId:
        type: integer
      updatedAt:
        type: string
    type: object
  RosterShiftCreateRequest:
    properties:
      name:
        type: string
      rosterId:
        type: integer
    type: object
  RosterUpdateRequest:
    properties:
      date:
        type: string
      name:
        type: string
    type: object
  SavedShift:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      rosterId:
        type: integer
      rosterShift:
        $ref: '#/definitions/RosterShift'
      rosterShiftId:
        type: integer
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/User'
        type: array
    type: object
  SavedShiftUpdateRequest:
    properties:
      users:
        items:
          type: integer
        type: array
    type: object
  User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      gewis_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      organs:
        items:
          $ref: '#/definitions/models.Organ'
        type: array
      updatedAt:
        type: string
    type: object
  UserCreateRequest:
    properties:
      gewisid:
        type: integer
      name:
        type: string
      organs:
        items:
          $ref: '#/definitions/Organ'
        type: array
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Organ:
    description: An organ that users can be part of.
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/User'
        type: array
    type: object
info:
  contact: {}
  description: A GEWIS Rooster maker
  title: GRooster
  version: "0.1"
paths:
  /auth/callback:
    get:
      description: Validates state, exchanges code for token, and returns user info
      parameters:
      - description: State returned from provider
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code from provider
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: User info and token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad request: missing or invalid state'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      summary: Handle OAuth2 Callback
      tags:
      - Auth
  /auth/redirect:
    get:
      description: Generates state, sets a cookie, and redirects to Google OIDC
      parameters:
      - description: State returned from provider
        in: query
        name: state
        required: true
        type: string
      responses:
        "200":
          description: redirect
          schema:
            type: string
        "500":
          description: pkg server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      summary: Redirect to OIDC provider
      tags:
      - Auth
  /roster:
    get:
      consumes:
      - application/json
      operationId: getRosters
      parameters:
      - description: Date filter (ISO format)
        in: query
        name: date
        type: string
      - description: Organ ID filter
        in: query
        name: organId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Roster'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all rosters or query by date and organ
      tags:
      - Roster
    post:
      consumes:
      - application/json
      operationId: createRoster
      parameters:
      - description: Roster input
        in: body
        name: createParams
        required: true
        schema:
          $ref: '#/definitions/RosterCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Roster'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: CreateRoster a new roster
      tags:
      - Roster
  /roster/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteRoster
      parameters:
      - description: Roster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: DeleteRoster a roster
      tags:
      - Roster
    get:
      consumes:
      - application/json
      operationId: getRoster
      parameters:
      - description: Roster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Roster'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a specific roster by id
      tags:
      - Roster
    patch:
      consumes:
      - application/json
      operationId: updateRoster
      parameters:
      - description: Roster ID
        in: path
        name: id
        required: true
        type: integer
      - description: Roster input
        in: body
        name: updateParams
        required: true
        schema:
          $ref: '#/definitions/RosterUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Roster'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a roster
      tags:
      - Roster
  /roster/{id}/save:
    post:
      consumes:
      - application/json
      operationId: rosterSave
      parameters:
      - description: Roster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Save a specific roster
      tags:
      - Saved Shift
  /roster/answer:
    post:
      consumes:
      - application/json
      operationId: createRosterAnswer
      parameters:
      - description: Roster answer input
        in: body
        name: createParams
        required: true
        schema:
          $ref: '#/definitions/RosterAnswerCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RosterAnswer'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new roster shift answer
      tags:
      - Roster Answer
  /roster/answer/{id}:
    patch:
      consumes:
      - application/json
      operationId: updateRosterAnswer
      parameters:
      - description: Roster Answer ID
        in: path
        name: id
        required: true
        type: integer
      - description: New answer value
        in: body
        name: updateParams
        required: true
        schema:
          $ref: '#/definitions/RosterAnswerUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RosterAnswer'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Updates a roster answer with the new value
      tags:
      - Roster Answer
  /roster/saved-shift/{id}:
    get:
      consumes:
      - application/json
      operationId: getSavedRoster
      parameters:
      - description: Roster ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Saved Shifts
          schema:
            items:
              $ref: '#/definitions/SavedShift'
            type: array
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: SavedShift not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all saved shifts for a specific roster
      tags:
      - Saved Shift
    patch:
      consumes:
      - application/json
      operationId: updateSavedShift
      parameters:
      - description: SavedShift ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: updateParams
        required: true
        schema:
          $ref: '#/definitions/SavedShiftUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SavedShift'
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: SavedShift not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a specific saved shift
      tags:
      - Saved Shift
  /roster/shift:
    post:
      consumes:
      - application/json
      operationId: createRosterShift
      parameters:
      - description: Roster shift input
        in: body
        name: createParams
        required: true
        schema:
          $ref: '#/definitions/RosterShiftCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RosterShift'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new roster shift
      tags:
      - Roster Shift
  /roster/shift/{id}:
    delete:
      consumes:
      - application/json
      operationId: deleteRosterShift
      parameters:
      - description: Roster Answer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Deletes a roster shift
      tags:
      - Roster Shift
  /user/:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users with optional query parameter filtering
      parameters:
      - description: Organ ID
        in: query
        name: organ_id
        type: integer
      - description: GEWIS ID
        in: query
        name: gewis_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users with optional filtering
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: DeleteRoster a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User
  /user/create:
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: User input
        in: body
        name: createParams
        required: true
        schema:
          $ref: '#/definitions/UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: CreateRoster a new user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
